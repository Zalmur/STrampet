// Generated by CoffeeScript 2.7.0
(function() {
  Take(["KeyMe", "Mode", "Nav", "Tick"], function(KeyMe, Mode, Nav, Tick) {
    var accel, decel, getAccel, maxVel, vel;
    if (!Mode.nav) {
      return;
    }
    decel = 1.25;
    maxVel = {
      xy: 10,
      z: 0.05 // xy polar, z cartesian
    };
    accel = {
      xy: 0.7,
      z: 0.004 // xy polar, z cartesian
    };
    vel = {
      a: 0,
      d: 0,
      z: 0 // xy polar (angle, displacement), z cartesian
    };
    Tick(function(time, dt) {
      var down, inputX, inputY, inputZ, left, minus, plus, right, scaledDt, up;
      left = KeyMe.pressing["left"];
      right = KeyMe.pressing["right"];
      up = KeyMe.pressing["up"];
      down = KeyMe.pressing["down"];
      plus = KeyMe.pressing["equals"];
      minus = KeyMe.pressing["minus"];
      inputX = getAccel(left, right);
      inputY = getAccel(up, down);
      inputZ = getAccel(plus, minus);
      if (inputZ === 0) {
        
        // Do z first, so we can scale xy based on z
        vel.z /= decel;
      }
      vel.z = Math.max(-maxVel.z, Math.min(maxVel.z, vel.z + accel.z * inputZ));
      if (inputX === 0 && inputY === 0) {
        vel.d /= decel;
      }
      if (inputY || inputX) {
        vel.a = Math.atan2(inputY, inputX);
      }
      vel.d = Math.min(maxVel.xy, vel.d + accel.xy * (Math.abs(inputX) + Math.abs(inputY)));
      if (!(Math.abs(vel.d) > 0.01 || Math.abs(vel.z) > 0.01)) {
        return;
      }
      
      // Scale the speed of nav so that it's somewhat framerate independent
      scaledDt = (dt * 1000) / 16;
      return Nav.by({
        x: scaledDt * Math.cos(vel.a) * vel.d,
        y: scaledDt * Math.sin(vel.a) * vel.d,
        z: scaledDt * vel.z
      });
    });
    return getAccel = function(pos, neg) {
      if (pos && !neg) {
        return 1;
      }
      if (neg && !pos) {
        return -1;
      }
      return 0;
    };
  });

}).call(this);

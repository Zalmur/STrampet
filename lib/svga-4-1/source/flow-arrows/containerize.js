// Generated by CoffeeScript 2.7.0
(function() {
  Take(["Pressure", "SVG"], function(Pressure, SVG) {
    return Make("FlowArrows:Containerize", function(parentElm, setupFn) {
      var active, children, direction, enabled, flow, pressure, scale, scope, updateActive, visible, volume;
      active = true;
      direction = 1;
      enabled = true;
      flow = 1;
      pressure = null;
      scale = 1;
      visible = true;
      volume = 1;
      scope = {
        element: SVG.create("g", parentElm),
        reverse: function() {
          return direction *= -1;
        },
        update: function(parentFlow, parentScale) {
          var child, f, i, len, s;
          if (active) {
            f = flow * direction * parentFlow;
            s = volume * scale * parentScale;
            for (i = 0, len = children.length; i < len; i++) {
              child = children[i];
              child.update(f, s);
            }
          }
          return void 0;
        }
      };
      children = setupFn(scope);
      updateActive = function() {
        active = enabled && visible && flow !== 0;
        return SVG.styles(scope.element, {
          display: active ? "inline" : "none"
        });
      };
      
      // This is used by FlowArrows when toggling
      Object.defineProperty(scope, 'enabled', {
        set: function(val) {
          if (visible !== val) {
            return updateActive(visible = val);
          }
        }
      });
      Object.defineProperty(scope, 'flow', {
        get: function() {
          return flow;
        },
        set: function(val) {
          if (flow !== val) {
            return updateActive(flow = val);
          }
        }
      });
      Object.defineProperty(scope, "pressure", {
        get: function() {
          return pressure;
        },
        set: function(val) {
          var color;
          if (pressure !== val) {
            pressure = val;
            color = Pressure(val);
            return SVG.attrs(scope.element, {
              fill: color,
              stroke: color
            });
          }
        }
      });
      Object.defineProperty(scope, 'scale', {
        get: function() {
          return scale;
        },
        set: function(val) {
          if (scale !== val) {
            return scale = val;
          }
        }
      });
      Object.defineProperty(scope, 'visible', {
        get: function() {
          return visible;
        },
        set: function(val) {
          if (visible !== val) {
            return updateActive(visible = val);
          }
        }
      });
      Object.defineProperty(scope, 'volume', {
        get: function() {
          return volume;
        },
        set: function(val) {
          if (volume !== val) {
            return volume = val;
          }
        }
      });
      return scope;
    });
  });

}).call(this);

// Generated by CoffeeScript 2.7.0
(function() {
  Take(["FlowArrows:Arrow", "FlowArrows:Config", "FlowArrows:Containerize", "Mode"], function(Arrow, Config, Containerize, Mode) {
    return Make("FlowArrows:Segment", function(parentElm, segmentData, segmentName, topElm) {
      return Containerize(parentElm, function(scope) { // This function must return an array of children
        var arrow, arrowCount, i, j, ref, results, segmentPosition, segmentSpacing, vector, vectorIndex, vectorPosition;
        if (Mode.dev) {
          scope.element.addEventListener("mouseover", function() {
            var counter, currentElm, ids;
            ids = [];
            currentElm = topElm;
            counter = 0;
            while ((currentElm != null) && currentElm.id !== "root") {
              counter++;
              if (currentElm.id != null) {
                ids.unshift(currentElm.id);
              }
              currentElm = currentElm.parentElement;
              if (counter > 50) {
                throw "FlowArrows:Segment while loop counter overflow â€” tell Ivan";
              }
            }
            return console.log(`${segmentName} in the arrows for @${ids.join('.')}`);
          });
        }
        arrowCount = Math.max(1, Math.round(segmentData.dist / Config.SPACING));
        segmentSpacing = segmentData.dist / arrowCount;
        segmentPosition = 0;
        vectorPosition = 0;
        vectorIndex = 0;
        vector = segmentData.vectors[vectorIndex];
        results = [];
        for (i = j = 0, ref = arrowCount; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
          while (vectorPosition > vector.dist) {
            vectorPosition -= vector.dist;
            vector = segmentData.vectors[++vectorIndex];
          }
          arrow = Arrow(scope.element, segmentData, segmentPosition, vectorPosition, vectorIndex);
          vectorPosition += segmentSpacing;
          segmentPosition += segmentSpacing;
          results.push(arrow);
        }
        return results;
      });
    });
  });

}).call(this);

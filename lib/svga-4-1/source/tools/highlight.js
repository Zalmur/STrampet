// Generated by CoffeeScript 2.7.0
(function() {
  Take(["FPS", "Gradient", "Input", "RAF", "Reaction", "SVG", "Tick", "SVGReady"], function(FPS, Gradient, Input, RAF, Reaction, SVG, Tick) {
    var activeHighlight, counter, dgradient, enabled, lgradient, mgradient, tgradient;
    enabled = true;
    activeHighlight = null;
    counter = 0;
    lgradient = Gradient.linear("LightHighlightGradient", {
      gradientUnits: "userSpaceOnUse"
    }, "#9FC", "#FF8", "#FD8");
    mgradient = Gradient.linear("MidHighlightGradient", {
      gradientUnits: "userSpaceOnUse"
    }, "#2F6", "#FF2", "#F72");
    dgradient = Gradient.linear("DarkHighlightGradient", {
      gradientUnits: "userSpaceOnUse"
    }, "#0B3", "#DD0", "#D50");
    tgradient = Gradient.linear("TextHighlightGradient", {
      gradientUnits: "userSpaceOnUse"
    }, "#091", "#BB0", "#B30");
    Tick(function(time) {
      var props, step;
      if (activeHighlight == null) {
        return;
      }
      step = Math.max(1, Math.round(60 / FPS()));
      if (++counter % step !== 0) {
        return;
      }
      props = {
        x1: Math.cos(time * Math.PI) * -60 - 50,
        y1: Math.sin(time * Math.PI) * -60 - 50,
        x2: Math.cos(time * Math.PI) * 60 - 50,
        y2: Math.sin(time * Math.PI) * 60 - 50
      };
      Gradient.updateProps(lgradient, props);
      Gradient.updateProps(mgradient, props);
      Gradient.updateProps(dgradient, props);
      return Gradient.updateProps(tgradient, props);
    });
    Make("Highlight", function(...targets) {
      var activate, active, deactivate, highlights, setup, timeout;
      highlights = [];
      active = false;
      timeout = null;
      setup = function(elm) {
        var doFill, doFunction, doStroke, e, fill, i, len, ref, ref1, ref2, ref3, stroke, width;
        fill = SVG.attr(elm, "fill");
        stroke = SVG.attr(elm, "stroke");
        width = SVG.attr(elm, "stroke-width");
        doFill = (fill != null) && fill !== "none" && fill !== "transparent";
        doStroke = (stroke != null) && stroke !== "none" && stroke !== "transparent";
        doFunction = ((ref = elm._scope) != null ? ref._highlight : void 0) != null;
        if (doFunction) {
          highlights.push(e = {
            elm: elm,
            function: elm._scope._highlight
          });
          e.dontHighlightOnHover = ((ref1 = elm._scope) != null ? ref1._dontHighlightOnHover : void 0) != null;
        } else if (doFill || doStroke) {
          highlights.push(e = {
            elm: elm,
            attrs: {}
          });
          if (doFill) {
            e.attrs.fill = fill;
          }
          if (doStroke) {
            e.attrs.stroke = stroke;
          }
          if (doStroke) {
            e.attrs.strokeWidth = width;
          }
          e.dontHighlightOnHover = ((ref2 = elm._scope) != null ? ref2._dontHighlightOnHover : void 0) != null;
        }
        if (!doFunction) {
          ref3 = elm.childNodes;
          for (i = 0, len = ref3.length; i < len; i++) {
            elm = ref3[i];
            if (elm.tagName === "g" || elm.tagName === "path" || elm.tagName === "text" || elm.tagName === "tspan" || elm.tagName === "rect" || elm.tagName === "circle") {
              setup(elm);
            }
          }
        }
        return void 0;
      };
      activate = function(currentTarget) {
        return function() {
          var h, i, len;
          if (active || !enabled) {
            return;
          }
          active = true;
          if (typeof activeHighlight === "function") {
            activeHighlight();
          }
          activeHighlight = deactivate; // Set this to be the new active highlight
          timeout = setTimeout(deactivate, 4000);
          for (i = 0, len = highlights.length; i < len; i++) {
            h = highlights[i];
            if (h.dontHighlightOnHover && currentTarget.element === h.elm) {

            // skip
            } else if (h.function != null) {
              h.function(true);
            } else {
              if (h.attrs.stroke != null) {
                if (h.elm.tagName === "text" || h.elm.tagName === "tspan") {
                  SVG.attrs(h.elm, {
                    stroke: "url(#TextHighlightGradient)",
                    strokeWidth: 3
                  });
                } else if (h.attrs.stroke === "#FFF" || h.attrs.stroke === "white") {
                  SVG.attrs(h.elm, {
                    stroke: "url(#LightHighlightGradient)",
                    strokeWidth: 3
                  });
                } else if (h.attrs.stroke === "#000" || h.attrs.stroke === "black") {
                  SVG.attrs(h.elm, {
                    stroke: "url(#DarkHighlightGradient)",
                    strokeWidth: 3
                  });
                } else {
                  SVG.attrs(h.elm, {
                    stroke: "url(#MidHighlightGradient)",
                    strokeWidth: 3
                  });
                }
              }
              if (h.attrs.fill != null) {
                if (h.elm.tagName === "text" || h.elm.tagName === "tspan") {
                  SVG.attrs(h.elm, {
                    fill: "url(#TextHighlightGradient)"
                  });
                } else if (h.attrs.fill === "#FFF" || h.attrs.fill === "white") {
                  SVG.attrs(h.elm, {
                    fill: "url(#LightHighlightGradient)"
                  });
                } else if (h.attrs.fill === "#000" || h.attrs.fill === "black") {
                  SVG.attrs(h.elm, {
                    fill: "url(#DarkHighlightGradient)"
                  });
                } else {
                  SVG.attrs(h.elm, {
                    fill: "url(#MidHighlightGradient)"
                  });
                }
              }
            }
          }
          return void 0;
        };
      };
      deactivate = function() {
        var h, i, len;
        if (active) {
          active = false;
          clearTimeout(timeout);
          activeHighlight = null;
          for (i = 0, len = highlights.length; i < len; i++) {
            h = highlights[i];
            if (h.function != null) {
              h.function(false);
            } else {
              SVG.attrs(h.elm, h.attrs);
            }
          }
        }
        return void 0;
      };
      // Delay running the Highlight setup code by one frame so that if fills / strokes are changed
      // by the @tick() function (eg: an @linearGradient is created), we can capture those changes.
      // See: https://github.com/cdig/svga/issues/133
      return RAF(function() {
        var i, j, len, len1, mouseProps, t, target, touchProps;
        for (i = 0, len = targets.length; i < len; i++) {
          target = targets[i];
          if (target == null) {
            console.log(targets.map(function(e) {
              return e != null ? e.element : void 0;
            }));
            throw new Error("Highlight called with a null element ^^^");
          }
          t = target.element || target; // Support both scopes and elements
          
          // Since setting up Highlight has a cost to it, we do some extra bookkeeping to make sure it's not happening every frame.
          if (t._HighlighterSetupCount == null) {
            t._HighlighterSetupCount = 0;
          }
          if (t._HighlighterSetupCount < 100) { // If we see this element more than 100 times, we're probably inside a tick
            t._HighlighterSetupCount++;
            setup(t);
          } else if (!t._HighlighterSetupCountWarned) {
            t._HighlighterSetupCountWarned = true;
            console.log("Warning: it looks like you're setting up Highlighter every frame. Don't do that.");
          }
        }
        for (j = 0, len1 = targets.length; j < len1; j++) {
          target = targets[j];
          t = target.element || target; // Support both scopes and elements
          if (!t._Highlighter) {
            t._Highlighter = true;
            // Handle Mouse and Touch separately, for better perf
            mouseProps = {
              moveIn: activate(target),
              moveOut: deactivate
            };
            touchProps = {
              down: activate(target)
            };
            Input(t, mouseProps, true, false);
            Input(t, touchProps, false, true);
          }
        }
        return void 0;
      });
    });
    return Reaction("Highlights:Set", function(v) {
      return enabled = v;
    });
  });

}).call(this);

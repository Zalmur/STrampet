// Generated by CoffeeScript 2.7.0
(function() {
  Take(["Pressure", "SVG"], function(Pressure, SVG) {
    var Gradient, existing;
    existing = {};
    return Make("Gradient", Gradient = {
      remove: function(name) {
        if (existing[name] != null) {
          SVG.defs.removeChild(existing[name]);
          return delete existing[name];
        }
      },
      updateStops: function(gradient, ...stops) {
        var attrs, dirty, i, j, k, len, len1, ref, stop;
        if (gradient._stops != null) {
          dirty = false;
          ref = gradient._stops;
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            stop = ref[i];
            dirty = (stop.color != null) && (stops[i].color != null) ? stop.color !== stops[i].color || stop.offset !== stops[i].offset || stop.opacity !== stops[i].opacity : stop !== stops[i];
            if (dirty) {
              break;
            }
          }
          if (!dirty) {
            return;
          }
        }
        gradient._stops = stops;
        while (gradient.hasChildNodes()) {
          gradient.removeChild(gradient.lastChild);
        }
        stops = stops[0] instanceof Array ? stops[0] : stops;
        for (i = k = 0, len1 = stops.length; k < len1; i = ++k) {
          stop = stops[i];
          if (typeof stop === "string") {
            SVG.create("stop", gradient, {
              stopColor: stop,
              offset: (100 * i / (stops.length - 1)) + "%"
            });
          } else if (typeof stop === "number") {
            SVG.create("stop", gradient, {
              stopColor: Pressure(stop),
              offset: (100 * i / (stops.length - 1)) + "%"
            });
          } else {
            attrs = {
              stopColor: stop.color,
              offset: 100 * (stop.offset != null ? stop.offset : i / (stops.length - 1)) + "%"
            };
            if (stop.opacity != null) {
              attrs.stopOpacity = stop.opacity;
            }
            SVG.create("stop", gradient, attrs);
          }
        }
        return gradient; // Composable
      },
      updateProps: function(gradient, props) {
        return SVG.attrs(gradient, props);
      },
      linear: function(name, props = {}, ...stops) {
        var attrs, gradient;
        if (existing[name] != null) {
          throw new Error(`Gradient named ${name} already exists. Please don't create the same gradient more than once.`);
        }
        attrs = typeof props === "object" ? (props.id = name, props) : props === true ? { // Vertical
          id: name,
          x2: 0,
          y2: 1
        } : {
          id: name
        };
        gradient = existing[name] = SVG.create("linearGradient", SVG.defs, attrs);
        Gradient.updateStops(gradient, stops);
        return gradient; // Composable
      },
      radial: function(name, props = {}, ...stops) {
        var gradient;
        if (existing[name] != null) {
          throw new Error(`Gradient named ${name} already exists. Please don't create the same gradient more than once.`);
        }
        existing[name] = true;
        props.id = name;
        gradient = existing[name] = SVG.create("radialGradient", SVG.defs, props);
        Gradient.updateStops(gradient, stops);
        return gradient; // Composable
      }
    });
  });

}).call(this);

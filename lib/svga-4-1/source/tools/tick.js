// Generated by CoffeeScript 2.7.0
(function() {
  // Tick is used for every-frame requestAnimationFrame callbacks.
  // For 1-time requestAnimationFrame callbacks, use system/raf.coffee
  Take(["Mode", "ParentData", "RAF"], function(Mode, ParentData, RAF) {
    var callbacks, internalTime, maximumDt, tick, wallTime;
    // We go all the way down to 2 FPS, but no lower, to avoid weirdness if the JS thread is paused.
    // Below 10 FPS, we'll start to get temporal skew where the internal time and the wall time diverge.
    maximumDt = 1 / 10;
    callbacks = [];
    wallTime = ((typeof performance !== "undefined" && performance !== null ? performance.now() : void 0) || 0) / 1000;
    internalTime = 0;
    RAF(tick = function(t) {
      var cb, dt, i, len;
      dt = Math.min(t / 1000 - wallTime, maximumDt);
      wallTime = t / 1000;
      if (!(Mode.embed && ParentData.get("disabled") === "true")) {
        internalTime += dt;
        for (i = 0, len = callbacks.length; i < len; i++) {
          cb = callbacks[i];
          cb(internalTime, dt);
        }
      }
      return RAF(tick);
    });
    return Make("Tick", function(cb, ignoreDuplicates = false) {
      var c, i, len;
      for (i = 0, len = callbacks.length; i < len; i++) {
        c = callbacks[i];
        if (!(c === cb)) {
          continue;
        }
        if (ignoreDuplicates) {
          return;
        }
        console.log(cb);
        throw new Error("^ Tick was called more than once with this function. You can use Tick(fn, true) to drop duplicates and bypass this error.");
      }
      callbacks.push(cb);
      return cb; // Composable
    });
  });

}).call(this);

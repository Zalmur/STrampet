// Generated by CoffeeScript 2.7.0
(function() {
  // The Registry allows us to advertise the existence of global maps and arrays of stuff,
  // with explicit control over when things can be registered and when they can be requested.
  // If you register something after registration closes, or request something before it closes,
  // you get slapped on the wrist.
  (function() {
    var Registry, closed, named, unnamed;
    named = {};
    unnamed = {};
    closed = {};
    return Make("Registry", Registry = {
      add: function(type, item) {
        if (closed[type]) {
          console.log(item);
          throw new Error(`^^^ This ${type} was registered too late.`);
        }
        return (unnamed[type] != null ? unnamed[type] : unnamed[type] = []).push(item);
      },
      all: function(type, byName = false) {
        if (!closed[type]) {
          throw new Error(`Registry.all(${type}, ${byName}) was called before registration closed.`);
        }
        if (byName) {
          return named[type];
        } else {
          return unnamed[type];
        }
      },
      set: function(type, name, item) {
        var ref;
        if (closed[type]) {
          console.log(item);
          throw new Error(`^^^ This ${type} named \"${name}\" was registered too late.`);
        }
        if (((ref = named[type]) != null ? ref[name] : void 0) != null) {
          console.log(item);
          throw new Error(`^^^ This ${type} is using the name \"${name}\", which is already in use.`);
        }
        return (named[type] != null ? named[type] : named[type] = {})[name] = item;
      },
      get: function(type, name) {
        if (!closed[type]) {
          throw new Error(`Registry.get(${type}, ${name}) was called before registration closed.`);
        }
        return named[type][name];
      },
      closeRegistration: function(type) {
        return closed[type] = true;
      }
    });
  })();

}).call(this);

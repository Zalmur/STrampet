// Generated by CoffeeScript 2.7.0
(function() {
  Take(["ControlPanel", "ControlPanelLayout", "GUI", "Registry", "Scope", "SVG", "ControlReady"], function(ControlPanel, ControlPanelLayout, {
      ControlPanel: GUI
    }, Registry, Scope, SVG) {
    var Control, addItemToGroup, currentGroup, defn, getGroup, instances, ref, setup, type;
    Control = {};
    instances = {};
    currentGroup = null;
    getGroup = function(color) {
      var bg, elm;
      if ((currentGroup == null) || (color == null) || color !== currentGroup.color) {
        elm = SVG.create("g", null);
        bg = SVG.create("rect", elm, {
          width: GUI.colInnerWidth + GUI.groupPad * 2,
          rx: GUI.groupBorderRadius,
          fill: color || "transparent"
        });
        ControlPanel.registerGroup(currentGroup = {
          scope: Scope(elm),
          bg: bg,
          color: color,
          itemScopes: [],
          height: GUI.groupPad * 2
        });
      }
      return currentGroup;
    };
    addItemToGroup = function(group, scope) {
      if (group.itemScopes.length > 0) {
        group.height += GUI.itemMargin;
      }
      scope.x = GUI.groupPad;
      scope.y = group.height - GUI.groupPad;
      group.height += scope.height;
      SVG.attrs(group.bg, {
        height: group.height
      });
      return group.itemScopes.push(scope);
    };
    setup = function(type, defn) {
      return Control[type] = function(props = {}) {
        var base, elm, group, scope;
        if (typeof props !== "object") {
          console.log(props);
          throw new Error(`Control.${type}(props) takes a optional props object. Got ^^^, which is not an object.`);
        }
        
        // Re-using an existing ID? Just attach to the existing control.
        if ((props.id != null) && (instances[props.id] != null)) {
          if (typeof (base = instances[props.id]).attach === "function") {
            base.attach(props);
          }
          return instances[props.id];
        } else {
          
          // Create a new control
          group = getGroup(props.group);
          elm = ControlPanel.createItemElement(props.parent || group.scope.element);
          
          // We check for this property in some control-specific scope-processors
          props._isControl = true;
          scope = Scope(elm, defn, props);
          addItemToGroup(group, scope);
          if (typeof scope.attach === "function") {
            scope.attach(props);
          }
          
          // We don't want controls to highlight when they're hovered over,
          // so we flag them in a way that highlight can see.
          scope._dontHighlightOnHover = true;
          if (props.id != null) {
            instances[props.id] = scope;
          }
          return scope;
        }
      };
    };
    ref = Registry.all("Control", true);
    for (type in ref) {
      defn = ref[type];
      setup(type, defn);
    }
    return Make("Control", Control);
  });

}).call(this);

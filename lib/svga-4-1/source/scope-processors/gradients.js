// Generated by CoffeeScript 2.7.0
(function() {
  // Depends on style
  Take(["Gradient", "Registry", "ScopeCheck"], function(Gradient, Registry, ScopeCheck) {
    var gradientCount;
    gradientCount = 0;
    return Registry.add("ScopeProcessor", function(scope) {
      var lGradAngle, lGradName, lGradStops, linearGradient, rGradName, rGradProps, rGradStops, radialGradient;
      ScopeCheck(scope, "linearGradient", "radialGradient");
      gradientCount++;
      linearGradient = null;
      radialGradient = null;
      lGradName = "LGradient" + gradientCount;
      lGradAngle = null;
      lGradStops = null;
      rGradName = "RGradient" + gradientCount;
      rGradProps = null;
      rGradStops = null;
      scope.linearGradient = function(angle, ...stops) {
        if (linearGradient == null) {
          linearGradient = Gradient.linear(lGradName);
        }
        if (typeof angle === "string") {
          stops.push(angle);
          angle = 0;
        }
        if (lGradAngle !== angle) {
          lGradAngle = angle;
          Gradient.updateProps(linearGradient, {
            x2: Math.cos(angle * Math.PI / 180),
            y2: Math.sin(angle * Math.PI / 180)
          });
        }
        if (lGradStops !== stops) {
          lGradStops = stops;
          Gradient.updateStops(linearGradient, ...stops);
        }
        return scope.fill = `url(#${lGradName})`;
      };
      return scope.radialGradient = function(props, ...stops) {
        if (radialGradient == null) {
          radialGradient = Gradient.radial(rGradName);
        }
        if (typeof props === "string" || typeof props === "number") {
          stops.push(props);
          props = {
            r: 0.5
          };
        }
        if (rGradProps !== props) {
          rGradProps = props;
          Gradient.updateProps(radialGradient, props);
        }
        if (rGradStops !== stops) {
          rGradStops = stops;
          Gradient.updateStops(radialGradient, ...stops);
        }
        return scope.fill = `url(#${rGradName})`;
      };
    });
  });

}).call(this);

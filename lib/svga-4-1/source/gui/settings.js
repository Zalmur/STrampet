// Generated by CoffeeScript 2.7.0
(function() {
  Take(["Action", "DOOM", "GUI", "Mode", "Panel", "Scope", "SVG", "ScopeReady"], function(Action, DOOM, GUI, Mode, Panel, Scope, SVG) {
    var Settings, bg, click, controls, elm, height, hit, label, scope, width;
    controls = [];
    Make("Settings", Settings = {
      addSetting: function(type, index, props) {
        var builder, controlApi, controlScope, elm;
        if (controls[index] != null) {
          return;
        }
        elm = DOOM.create("svg", null);
        controls[index] = elm;
        controlScope = Scope(SVG.create("g", elm));
        builder = Take(`Settings${type}`);
        controlApi = builder(controlScope.element, props);
        return controlApi;
      }
    });
    if (!Mode.settings) {
      return;
    }
    // Create the Settings button

    // Eventually, the settings button at the top should be part of an HTML-based HUD so that we don't need all this nonsense
    elm = SVG.create("g", GUI.elm, {
      ui: true
    });
    scope = Scope(elm);
    scope.x = GUI.ControlPanel.panelMargin;
    scope.y = GUI.ControlPanel.panelMargin;
    width = 60;
    height = 22;
    hit = SVG.create("rect", elm, {
      x: -GUI.ControlPanel.panelMargin,
      y: -GUI.ControlPanel.panelMargin,
      width: width + 16,
      height: height + 16,
      fill: "transparent"
    });
    bg = SVG.create("rect", elm, {
      width: width,
      height: height,
      rx: 3,
      fill: GUI.Colors.bg.l
    });
    label = SVG.create("text", elm, {
      textContent: "Settings",
      x: width / 2,
      y: height * 0.7,
      fontSize: 14,
      textAnchor: "middle",
      fill: "hsl(220, 10%, 92%)"
    });
    click = function() {
      var control, controlsElm, i, info, infoLines, len, line, panel, ref, ref1, results, title;
      title = (ref = Mode.get("meta")) != null ? ref.title : void 0;
      if ((title == null) && !Mode.embed) {
        title = document.title.replace("| ", "").replace("LunchBox Sessions", "");
      }
      if (infoLines = (ref1 = Mode.get("meta")) != null ? ref1.info : void 0) {
        info = ((function() {
          var i, len, results;
          results = [];
          for (i = 0, len = infoLines.length; i < len; i++) {
            line = infoLines[i];
            results.push(`<p>${line}</p>`);
          }
          return results;
        })()).join("");
      }
      panel = Panel("settings", `<div settings-controls></div>
<h3 settings-title>${title || ""}</h3>
<div settings-info>${info || ""}</div>
<small settings-copyright>Â© CD Industrial Group Inc.</small>`);
      controlsElm = panel.querySelector("[settings-controls]");
      results = [];
      for (i = 0, len = controls.length; i < len; i++) {
        control = controls[i];
        if (control != null) {
          results.push(DOOM.append(controlsElm, control));
        }
      }
      return results;
    };
    elm.addEventListener("click", click);
    return elm.addEventListener("touchend", click); // Hack: Input touchend preventDefault blocks click
  });

}).call(this);

// Generated by CoffeeScript 2.7.0
(function() {
  Take(["ControlPanelLayout", "Gradient", "GUI", "SVG", "Scope", "TRS", "ControlReady"], function(ControlPanelLayout, Gradient, GUI, SVG, Scope, TRS, ControlReady) {
    var CP, ControlPanel, columnElms, columnsElm, getColumnElm, groups, panelBg, panelElm, showing;
    // Aliases
    CP = GUI.ControlPanel;
    // State
    showing = false;
    groups = [];
    columnElms = [];
    // Elements
    panelElm = SVG.create("g", GUI.elm, {
      xControls: "",
      fontSize: 16,
      textAnchor: "middle"
    });
    panelBg = SVG.create("rect", panelElm, {
      xPanelBg: "",
      rx: CP.panelBorderRadius,
      fill: GUI.Colors.bg.l
    });
    columnsElm = SVG.create("g", panelElm, {
      xColumns: "",
      transform: `translate(${CP.panelPadding},${CP.panelPadding})`
    });
    getColumnElm = function(index) {
      return columnElms[index] != null ? columnElms[index] : columnElms[index] = SVG.create("g", columnsElm);
    };
    Take("SceneReady", function() {
      if (!showing) {
        // It'd be simpler to just not add the CP unless we need it,
        // rather than what we're doing here (remove it if it's unused).
        // But we need to do it this way to avoid an IE bug.
        return GUI.elm.removeChild(panelElm);
      }
    });
    return Make("ControlPanel", ControlPanel = Scope(panelElm, function() {
      return {
        registerGroup: function(group) {
          return groups.push(group);
        },
        createItemElement: function(parent) {
          showing = true;
          return SVG.create("g", parent);
        },
        computeLayout: function(vertical, totalAvailableSpace) {
          var consumedSpace, innerPanelSize, layout, marginedSpace, outerPanelSize, panelInfo, scale;
          marginedSpace = {
            w: totalAvailableSpace.w - CP.panelMargin * 2,
            h: totalAvailableSpace.h - CP.panelMargin * 2
          };
          [innerPanelSize, layout] = vertical ? ControlPanelLayout.vertical(groups, marginedSpace) : ControlPanelLayout.horizontal(groups, marginedSpace);
          // If the panel is still way the hell too big, scale down
          scale = vertical && (innerPanelSize.w > marginedSpace.w / 2 || innerPanelSize.h > marginedSpace.h) ? Math.max(0.8, Math.min(marginedSpace.w / innerPanelSize.w / 2, marginedSpace.h / innerPanelSize.h)) : !vertical && (innerPanelSize.w > marginedSpace.w || innerPanelSize.h > marginedSpace.h / 2) ? Math.max(0.8, Math.min(marginedSpace.w / innerPanelSize.w, marginedSpace.h / innerPanelSize.h / 2)) : 1;
          outerPanelSize = {
            w: innerPanelSize.w * scale + CP.panelMargin * 2,
            h: innerPanelSize.h * scale + CP.panelMargin * 2
          };
          // How much of the available content space does the panel use up?
          consumedSpace = {
            w: 0,
            h: 0
          };
          if (showing && vertical) {
            consumedSpace.w = outerPanelSize.w;
          }
          if (showing && !vertical) {
            consumedSpace.h = outerPanelSize.h;
          }
          return panelInfo = {
            showing: showing,
            vertical: vertical,
            consumedSpace: consumedSpace,
            innerPanelSize: innerPanelSize,
            outerPanelSize: outerPanelSize,
            scale: scale,
            layout: layout
          };
        },
        applyLayout: function(resizeInfo, totalAvailableSpace) {
          if (!resizeInfo.panelInfo.showing) {
            return;
          }
          // Now that we know which layout we're using, apply it to the SVG
          ControlPanelLayout.applyLayout(resizeInfo.panelInfo.layout, getColumnElm);
          if (resizeInfo.panelInfo.vertical) {
            ControlPanel.x = Math.round(totalAvailableSpace.w - resizeInfo.panelInfo.outerPanelSize.w + CP.panelMargin);
            ControlPanel.y = Math.round(totalAvailableSpace.h / 2 - resizeInfo.panelInfo.outerPanelSize.h / 2 + CP.panelMargin);
          } else {
            ControlPanel.x = Math.round(totalAvailableSpace.w / 2 - resizeInfo.panelInfo.outerPanelSize.w / 2 + CP.panelMargin);
            ControlPanel.y = Math.round(totalAvailableSpace.h - resizeInfo.panelInfo.outerPanelSize.h + CP.panelMargin);
          }
          ControlPanel.scale = resizeInfo.panelInfo.scale;
          // Apply the final size to our background elm
          return SVG.attrs(panelBg, {
            width: resizeInfo.panelInfo.innerPanelSize.w,
            height: resizeInfo.panelInfo.innerPanelSize.h
          });
        }
      };
    }));
  });

}).call(this);

// Generated by CoffeeScript 2.7.0
(function() {
  Take(["Action", "DOOM", "Ease", "GUI", "Resize", "SVG", "SVGReady"], function(Action, DOOM, Ease, GUI, Resize, SVG) {
    var Panel, close, cover, foreignObject, frame, g, hideCallback, inner, outer, showing;
    hideCallback = null;
    showing = false;
    foreignObject = SVG.create("foreignObject", GUI.elm, {
      id: "panel"
    });
    outer = DOOM.create("div", foreignObject, {
      id: "panel-outer"
    });
    cover = DOOM.create("div", outer, {
      id: "panel-cover"
    });
    frame = DOOM.create("div", outer, {
      id: "panel-frame"
    });
    inner = DOOM.create("div", frame);
    close = DOOM.create("svg", frame, {
      id: "panel-close"
    });
    g = SVG.create("g", close, {
      ui: true,
      transform: "translate(16,16)"
    });
    SVG.create("circle", g, {
      r: 16,
      fill: "#F00"
    });
    SVG.create("path", g, {
      d: "M-6,-6 L6,6 M6,-6 L-6,6",
      stroke: "#FFF",
      strokeWidth: 3,
      strokeLinecap: "round"
    });
    cover.addEventListener("click", function() {
      return Action("Panel:Hide");
    });
    close.addEventListener("click", function() {
      return Action("Panel:Hide");
    });
    cover.addEventListener("touchend", function() {
      return Action("Panel:Hide"); // Hack: Input touchend preventDefault blocks click
    });
    close.addEventListener("touchend", function() {
      return Action("Panel:Hide"); // Hack: Input touchend preventDefault blocks click
    });
    window.addEventListener("keydown", function(e) {
      if (!showing) {
        return;
      }
      if (e.keyCode === 27) {
        Action("Panel:Hide");
      }
      if (e.keyCode === 13 && DOOM(inner, "id") === "Alert") {
        return Action("Panel:Hide");
      }
    });
    Resize(function() {
      return SVG.attrs(foreignObject, {
        width: window.innerWidth,
        height: window.innerHeight
      });
    });
    // Elements inside foreignObject don't inherit scaling, so to shrink the panel on narrow screens
    // we need to apply scaling using CSS transform to the HTML elements. Due to the CSS grid layout
    // pushing the panel off the right side, we introduce a negative offset to keep it centered.
    Resize(function(info) {
      var offset, panelWidth, scale;
      panelWidth = frame.offsetWidth;
      offset = Math.max(0, (panelWidth - window.innerWidth) / 2);
      scale = Ease.linear(info.window.w, 0, panelWidth, 0, 1);
      return DOOM(frame, {
        transform: `translateX(-${offset}px) scale(${scale})`
      });
    });
    Panel = function(id, html) {
      DOOM(inner, {
        id: id
      });
      inner.innerHTML = html; // Force the panel to be re-built from scratch, rather than using DOOM's caching, since code following this call will expect fresh DOM nodes to add event handlers to
      Action("Panel:Show");
      return inner;
    };
    Panel.show = function() {
      DOOM(foreignObject, {
        pointerEvents: "auto"
      });
      DOOM(outer, {
        opacity: 1
      });
      return showing = true;
    };
    Panel.hide = function() {
      DOOM(foreignObject, {
        pointerEvents: null
      });
      DOOM(outer, {
        opacity: 0
      });
      if (typeof hideCallback === "function") {
        hideCallback();
      }
      hideCallback = null;
      return showing = false;
    };
    Panel.alert = function(msg, btn, cb) {
      var buttonElm;
      if (cb == null) {
        [cb, btn] = [btn, "Okay"]; // The middle argument is optional
      }
      hideCallback = cb;
      inner = Panel("Alert", `${msg}<div><button>${btn}</button></div>`);
      buttonElm = inner.querySelector("button");
      buttonElm.addEventListener("click", function() {
        return Action("Panel:Hide");
      });
      return buttonElm.addEventListener("touchend", function() {
        return Action("Panel:Hide"); // Hack: Input touchend preventDefault blocks click
      });
    };
    Panel.hide();
    return Make("Panel", Panel);
  });

}).call(this);

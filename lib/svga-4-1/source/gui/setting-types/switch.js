// Generated by CoffeeScript 2.7.0
(function() {
  Take(["GUI", "Input", "SVG", "TRS", "Tween"], function({
      Panel: GUI
    }, Input, SVG, TRS, Tween) {
    var SettingsSwitch;
    return Make("SettingsSwitch", SettingsSwitch = function(elm, props) {
      var bgc, blueBG, isActive, label, labelPad, labelWidth, lightBG, lightTrack, normalTrack, orangeBG, scope, strokeWidth, thumb, thumbSize, tickBG, toClicked, toClicking, toHover, toNormal, toggle, track;
      strokeWidth = 2;
      labelPad = 10;
      labelWidth = GUI.itemWidth / 2;
      thumbSize = GUI.unit;
      isActive = false;
      normalTrack = "hsl(227, 45%, 24%)";
      lightTrack = "hsl(92, 46%, 57%)";
      SVG.attrs(elm, {
        ui: true
      });
      track = SVG.create("rect", elm, {
        x: strokeWidth / 2 + labelWidth,
        y: strokeWidth / 2,
        width: thumbSize * 2 - strokeWidth,
        height: thumbSize - strokeWidth,
        strokeWidth: strokeWidth,
        fill: normalTrack,
        stroke: normalTrack,
        rx: thumbSize / 2
      });
      thumb = TRS(SVG.create("circle", elm, {
        cx: thumbSize / 2 + labelWidth,
        cy: thumbSize / 2,
        strokeWidth: strokeWidth,
        fill: "hsl(220, 10%, 92%)",
        r: thumbSize / 2 - strokeWidth / 2
      }));
      label = SVG.create("text", elm, {
        textContent: props.name,
        x: labelWidth - labelPad,
        y: 21,
        textAnchor: "end",
        fill: "hsl(220, 10%, 92%)"
      });
      toggle = function() {
        isActive = !isActive;
        TRS.abs(thumb, {
          x: isActive ? thumbSize : 0
        });
        SVG.attrs(track, {
          fill: isActive ? lightTrack : normalTrack
        });
        return props.update(isActive);
      };
      // Setup the thumb stroke color for tweening
      bgc = blueBG = {
        r: 34,
        g: 46,
        b: 89
      };
      lightBG = {
        r: 133,
        g: 163,
        b: 224
      };
      orangeBG = {
        r: 255,
        g: 196,
        b: 46
      };
      tickBG = function(_bgc) {
        bgc = _bgc;
        return SVG.attrs(thumb, {
          stroke: `rgb(${bgc.r | 0},${bgc.g | 0},${bgc.b | 0})`
        });
      };
      tickBG(blueBG);
      // Input event handling
      toNormal = function(e, state) {
        return Tween(bgc, blueBG, .2, {
          tick: tickBG
        });
      };
      toHover = function(e, state) {
        if (!state.touch) {
          return Tween(bgc, lightBG, 0, {
            tick: tickBG
          });
        }
      };
      toClicking = function(e, state) {
        return Tween(bgc, orangeBG, 0, {
          tick: tickBG
        });
      };
      toClicked = function(e, state) {
        return Tween(bgc, lightBG, .2, {
          tick: tickBG
        });
      };
      Input(elm, {
        moveIn: toHover,
        dragIn: function(e, state) {
          if (state.clicking) {
            return toClicking();
          }
        },
        down: toClicking,
        up: toHover,
        moveOut: toNormal,
        dragOut: toNormal,
        click: function() {
          toClicked();
          toggle();
          return void 0;
        }
      });
      if (props.value) {
        // Init
        toggle();
      }
      return scope = {
        isActive: function() {
          return isActive;
        },
        setValue: function(v = null) {
          if ((v == null) || v !== isActive) {
            return toggle();
          }
        }
      };
    });
  });

}).call(this);

// Generated by CoffeeScript 2.7.0
(function() {
  Take(["GUI", "Input", "Registry", "SVG", "Tween"], function({
      ControlPanel: GUI
    }, Input, Registry, SVG, Tween) {
    return Registry.set("Control", "button", function(elm, props) {
      var bg, bgFill, bgc, blueBG, click, handlers, input, label, labelFill, lightBG, orangeBG, outerWidth, scope, strokeWidth, tickBG, toClicked, toClicking, toHover, toNormal;
      // An array to hold all the click functions that have been attached to this button
      handlers = [];
      bgFill = props.bgColor || "hsl(220, 10%, 92%)";
      labelFill = props.fontColor || "hsl(227, 16%, 24%)";
      outerWidth = props.width || GUI.colInnerWidth;
      strokeWidth = 2;
      // Enable pointer cursor, other UI features
      SVG.attrs(elm, {
        ui: true
      });
      // Button background element
      bg = SVG.create("rect", elm, {
        x: strokeWidth / 2,
        y: strokeWidth / 2,
        width: outerWidth - strokeWidth,
        height: GUI.unit - strokeWidth,
        rx: GUI.borderRadius,
        strokeWidth: strokeWidth,
        fill: bgFill
      });
      // Button text label
      label = SVG.create("text", elm, {
        textContent: props.name,
        x: outerWidth / 2,
        y: props.valign || ((props.fontSize || 16) + GUI.unit / 5),
        fontSize: props.fontSize || 16,
        fontWeight: props.fontWeight || "normal",
        fontStyle: props.fontStyle || "normal",
        fill: labelFill
      });
      // Setup the bg stroke color for tweening
      bgc = blueBG = {
        r: 34,
        g: 46,
        b: 89
      };
      lightBG = {
        r: 133,
        g: 163,
        b: 224
      };
      orangeBG = {
        r: 255,
        g: 196,
        b: 46
      };
      tickBG = function(_bgc) {
        bgc = _bgc;
        return SVG.attrs(bg, {
          stroke: `rgb(${bgc.r | 0},${bgc.g | 0},${bgc.b | 0})`
        });
      };
      tickBG(blueBG);
      // Input event handling
      toNormal = function(e, state) {
        return Tween(bgc, blueBG, .2, {
          tick: tickBG
        });
      };
      toHover = function(e, state) {
        if (!state.touch) {
          return Tween(bgc, lightBG, 0, {
            tick: tickBG
          });
        }
      };
      toClicking = function(e, state) {
        return Tween(bgc, orangeBG, 0, {
          tick: tickBG
        });
      };
      toClicked = function(e, state) {
        return Tween(bgc, lightBG, .2, {
          tick: tickBG
        });
      };
      input = Input(elm, {
        moveIn: toHover,
        dragIn: function(e, state) {
          if (state.clicking) {
            return toClicking();
          }
        },
        down: toClicking,
        up: toHover,
        moveOut: toNormal,
        dragOut: toNormal
      });
      // Hack around bugginess in chrome
      click = function() {
        var handler, i, len, results;
        // if input.state.clicking # breaks control disabling/enabling...
        if (!scope.enabled) { // ...so we do this instead (see enabled.coffee)
          return;
        }
        toClicked();
        results = [];
        for (i = 0, len = handlers.length; i < len; i++) {
          handler = handlers[i];
          results.push(handler());
        }
        return results;
      };
      elm.addEventListener("mouseup", click);
      elm.addEventListener("touchend", click);
      // Our scope just has the 3 mandatory control functions, nothing special.
      return scope = {
        height: GUI.unit,
        input: input,
        attach: function(props) {
          if (props.click != null) {
            return handlers.push(props.click);
          }
        },
        _highlight: function(enable) {
          if (enable) {
            SVG.attrs(bg, {
              fill: "url(#LightHighlightGradient)"
            });
            return SVG.attrs(label, {
              fill: "black"
            });
          } else {
            SVG.attrs(bg, {
              fill: bgFill
            });
            return SVG.attrs(label, {
              fill: labelFill
            });
          }
        }
      };
    });
  });

}).call(this);

// Generated by CoffeeScript 2.7.0
(function() {
  Take(["GUI", "Input", "Registry", "SVG", "Tween"], function({
      ControlPanel: GUI
    }, Input, Registry, SVG, Tween) {
    return Registry.set("Control", "pushButton", function(elm, props) {
      var bgFill, blueBG, bsc, button, height, hit, input, isActive, label, labelFill, lightBG, offHandlers, onHandlers, orangeBG, radius, scope, strokeWidth, tickBG, toClicking, toHover, toNormal;
      // Arrays to hold all the functions that have been attached to this control
      onHandlers = [];
      offHandlers = [];
      isActive = false;
      strokeWidth = 2;
      radius = GUI.unit * 0.6;
      height = Math.max(radius * 2, props.fontSize || 16);
      bgFill = "hsl(220, 10%, 92%)";
      labelFill = props.fontColor || "hsl(220, 10%, 92%)";
      // Enable pointer cursor, other UI features
      SVG.attrs(elm, {
        ui: true
      });
      hit = SVG.create("rect", elm, {
        width: GUI.colInnerWidth,
        height: height,
        fill: "transparent"
      });
      button = SVG.create("circle", elm, {
        cx: radius,
        cy: radius,
        r: radius - strokeWidth / 2,
        strokeWidth: strokeWidth,
        fill: bgFill
      });
      label = SVG.create("text", elm, {
        textContent: props.name,
        x: radius * 2 + GUI.labelMargin,
        y: radius + (props.fontSize || 16) * 0.375,
        textAnchor: "start",
        fontSize: props.fontSize || 16,
        fontWeight: props.fontWeight || "normal",
        fontStyle: props.fontStyle || "normal",
        fill: labelFill
      });
      // Setup the button stroke color for tweening
      bsc = blueBG = {
        r: 34,
        g: 46,
        b: 89
      };
      lightBG = {
        r: 133,
        g: 163,
        b: 224
      };
      orangeBG = {
        r: 255,
        g: 196,
        b: 46
      };
      tickBG = function(_bsc) {
        bsc = _bsc;
        return SVG.attrs(button, {
          stroke: `rgb(${bsc.r | 0},${bsc.g | 0},${bsc.b | 0})`
        });
      };
      tickBG(blueBG);
      // Input event handling
      toNormal = function(e, state) {
        return Tween(bsc, blueBG, .2, {
          tick: tickBG
        });
      };
      toHover = function(e, state) {
        return Tween(bsc, lightBG, 0, {
          tick: tickBG
        });
      };
      toClicking = function(e, state) {
        return Tween(bsc, orangeBG, 0, {
          tick: tickBG
        });
      };
      input = Input(elm, {
        moveIn: function() {
          if (!isActive) {
            return toHover();
          }
        },
        down: function() {
          var i, len, onHandler;
          if (isActive) {
            return;
          }
          isActive = true;
          toClicking();
          for (i = 0, len = onHandlers.length; i < len; i++) {
            onHandler = onHandlers[i];
            onHandler();
          }
          return void 0;
        },
        up: function() {
          var i, len, offHandler;
          if (!isActive) {
            return;
          }
          isActive = false;
          toHover();
          for (i = 0, len = offHandlers.length; i < len; i++) {
            offHandler = offHandlers[i];
            offHandler();
          }
          return void 0;
        },
        miss: function() {
          var i, len, offHandler;
          if (!isActive) {
            return;
          }
          isActive = false;
          toNormal();
          for (i = 0, len = offHandlers.length; i < len; i++) {
            offHandler = offHandlers[i];
            offHandler();
          }
          return void 0;
        },
        moveOut: function() {
          if (!isActive) {
            return toNormal;
          }
        }
      });
      // Our scope just has the 3 mandatory control functions, nothing special.
      return scope = {
        height: height,
        input: input,
        setValue: function(activate, runHandlers = true) {
          var i, j, len, len1, offHandler, onHandler;
          if (activate && !isActive) {
            isActive = true;
            toClicking();
            if (runHandlers) {
              for (i = 0, len = onHandlers.length; i < len; i++) {
                onHandler = onHandlers[i];
                onHandler();
              }
            }
          } else if (isActive && !activate) {
            isActive = false;
            if (input.over) {
              toHover();
            } else {
              toNormal();
            }
            if (runHandlers) {
              for (j = 0, len1 = offHandlers.length; j < len1; j++) {
                offHandler = offHandlers[j];
                offHandler();
              }
            }
          }
          return void 0;
        },
        attach: function(props) {
          if (props.on != null) {
            onHandlers.push(props.on);
          }
          if (props.off != null) {
            return offHandlers.push(props.off);
          }
        },
        _highlight: function(enable) {
          if (enable) {
            SVG.attrs(button, {
              fill: "url(#LightHighlightGradient)"
            });
            return SVG.attrs(label, {
              fill: "url(#LightHighlightGradient)"
            });
          } else {
            SVG.attrs(button, {
              fill: bgFill
            });
            return SVG.attrs(label, {
              fill: labelFill
            });
          }
        }
      };
    });
  });

}).call(this);

// Generated by CoffeeScript 2.7.0
(function() {
  Take(["GUI", "Input", "SVG", "Tween"], function({
      ControlPanel: GUI
    }, Input, SVG, Tween) {
    var active;
    active = null;
    return Make("SelectorButton", function(elm, props) {
      var attachClick, bg, blueBG, click, curBG, handlers, highlighting, input, isActive, label, labelFill, lightBG, orangeBG, scope, strokeWidth, tickBG, toActive, toClicking, toHover, toNormal, unclick, whiteBG;
      handlers = [];
      isActive = false;
      highlighting = false;
      labelFill = props.fontColor || "hsl(227, 16%, 24%)";
      strokeWidth = 2;
      // Enable pointer cursor, other UI features
      SVG.attrs(elm, {
        ui: true
      });
      bg = SVG.create("rect", elm, {
        x: strokeWidth / 2,
        y: strokeWidth / 2,
        height: GUI.unit - strokeWidth
      });
      label = SVG.create("text", elm, {
        y: (props.fontSize || 16) + GUI.unit / 5,
        textContent: props.name,
        fill: labelFill,
        fontSize: props.fontSize || 16,
        fontWeight: props.fontWeight || "normal",
        fontStyle: props.fontStyle || "normal"
      });
      // Setup the bg stroke color for tweening
      curBG = whiteBG = {
        r: 233,
        g: 234,
        b: 237
      };
      lightBG = {
        r: 142,
        g: 196,
        b: 96
      };
      orangeBG = {
        r: 255,
        g: 196,
        b: 46
      };
      blueBG = {
        r: 183,
        g: 213,
        b: 255
      };
      tickBG = function(_curBG) {
        curBG = _curBG;
        if (highlighting) {
          if (isActive) {
            return SVG.attrs(bg, {
              fill: "url(#MidHighlightGradient)"
            });
          } else {
            return SVG.attrs(bg, {
              fill: "url(#LightHighlightGradient)"
            });
          }
        } else {
          return SVG.attrs(bg, {
            fill: `rgb(${curBG.r | 0},${curBG.g | 0},${curBG.b | 0})`
          });
        }
      };
      tickBG(whiteBG);
      // Input event handling
      toNormal = function(e, state) {
        return Tween(curBG, whiteBG, .2, {
          tick: tickBG
        });
      };
      toHover = function(e, state) {
        if (!state.touch && !isActive) {
          return Tween(curBG, blueBG, 0, {
            tick: tickBG
          });
        }
      };
      toClicking = function(e, state) {
        return Tween(curBG, orangeBG, 0, {
          tick: tickBG
        });
      };
      toActive = function(e, state) {
        return Tween(curBG, lightBG, .2, {
          tick: tickBG
        });
      };
      unclick = function() {
        toNormal();
        return isActive = false;
      };
      click = function() {
        var handler, i, len;
        props.setActive(unclick);
        isActive = true;
        toActive();
        for (i = 0, len = handlers.length; i < len; i++) {
          handler = handlers[i];
          handler();
        }
        return void 0;
      };
      input = Input(elm, {
        moveIn: function(e, state) {
          if (!isActive) {
            return toHover(e, state);
          }
        },
        dragIn: function(e, state) {
          if (state.clicking && !isActive) {
            return toClicking(e, state);
          }
        },
        down: function(e, state) {
          if (!isActive) {
            return toClicking(e, state);
          }
        },
        up: function(e, state) {
          if (!isActive) {
            return toHover(e, state);
          }
        },
        moveOut: function(e, state) {
          if (!isActive) {
            return toNormal(e, state);
          }
        },
        dragOut: function(e, state) {
          if (!isActive) {
            return toNormal(e, state);
          }
        },
        click: function(e, state) {
          if (!isActive) {
            return click(e, state);
          }
        }
      });
      // Set up click handling
      attachClick = function(cb) {
        return handlers.push(cb);
      };
      if (props.click != null) {
        attachClick(props.click);
      }
      Take("SceneReady", function() {
        if (props.active) {
          return click();
        }
      });
      return scope = {
        click: attachClick,
        input: input,
        setValue: function(activate, runHandlers = true) {
          var handler, i, len;
          if (activate && !isActive) {
            props.setActive(unclick);
            isActive = true;
            toActive();
            if (runHandlers) {
              for (i = 0, len = handlers.length; i < len; i++) {
                handler = handlers[i];
                handler();
              }
            }
          } else if (isActive && !activate) {
            unclick();
          }
          return void 0;
        },
        resize: function(width) {
          SVG.attrs(bg, {
            width: width - strokeWidth
          });
          return SVG.attrs(label, {
            x: width / 2
          });
        },
        _highlight: function(enable) {
          if (highlighting = enable) {
            SVG.attrs(label, {
              fill: "black"
            });
          } else {
            SVG.attrs(label, {
              fill: labelFill
            });
          }
          return tickBG(curBG);
        }
      };
    });
  });

}).call(this);

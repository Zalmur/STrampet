// Generated by CoffeeScript 2.7.0
(function() {
  Take(["Mode", "Tick", "SVG", "SVGReady"], function(Mode, Tick, SVG) {
    var HUD, colors, elapsed, elm, needsUpdate, rate, values;
    if (!Mode.dev) {
      Make("HUD", function() {}); // Noop
      return;
    }
    rate = 1 / 30; // Update every nth of a second
    elapsed = rate; // Run the first update immediately
    needsUpdate = true;
    colors = {};
    values = {};
    elm = document.createElement("div");
    elm.setAttribute("svga-hud", "true");
    SVG.svg.parentElement.insertBefore(elm, SVG.svg);
    Tick(function(time, dt) {
      var html, k, v;
      elapsed += dt;
      if (elapsed >= rate) {
        elapsed -= rate;
        if (needsUpdate) {
          needsUpdate = false;
          html = "";
          for (k in values) {
            v = values[k];
            html += `<div style='color:${colors[k]}'>${k}: ${v}</div>`;
          }
          return elm.innerHTML = html;
        }
      }
    });
    return Make("HUD", HUD = function(k, v, c = "#000") {
      var _k, _v;
      // Allow passing an object of k-v pairs, with the 2nd arg as the optional color
      if (typeof k === "object") {
        for (_k in k) {
          _v = k[_k];
          HUD(_k, _v, v);
        }
      // Pretty-print nested objects (and avoid infinite loops if there's a reference cycle)
      } else if ((v != null) && typeof v === "object" && !v._hud_visited) {
        v._hud_visited = true;
        for (_k in v) {
          _v = v[_k];
          if (_k !== "_hud_visited") {
            HUD(`${k}.${_k}`, _v, v);
          }
        }
        v._hud_visited = false;
      } else {
        if (values[k] !== v || (values[k] == null)) {
          values[k] = v;
          colors[k] = c;
          needsUpdate = true;
        }
      }
      return v; // Pass-through whenever possible
    });
  });

}).call(this);

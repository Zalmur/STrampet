// Generated by CoffeeScript 2.7.0
(function() {
  Take(["Mode", "Registry", "ScopeCheck", "Symbol"], function(Mode, Registry, ScopeCheck, Symbol) {
    var Scope, findParent;
    findParent = function(element) {
      while (element != null) {
        if (element._scope != null) {
          return element._scope;
        }
        element = element.parentNode;
      }
      return null;
    };
    return Make("Scope", Scope = function(element, symbol, props = {}) {
      var attr, attrs, i, j, len, len1, parentScope, ref, scope, scopeProcessor;
      if (!element instanceof SVGElement) {
        console.log(element);
        throw new Error("Scope() takes an element as the first argument. Got ^^^");
      }
      if ((symbol != null) && typeof symbol !== "function") {
        console.log(symbol);
        throw new Error("Scope() takes a function as the second arg. Got ^^^");
      }
      if (typeof props !== "object") {
        console.log(props);
        throw new Error("Scope() takes an optional object as the third arg. Got ^^^");
      }
      scope = symbol != null ? symbol(element, props) : {};
      parentScope = props.parent || findParent(element);
      ScopeCheck(scope, "_symbol", "children", "element", "id", "parent", "root");
      // Private APIs
      element._scope = scope;
      scope._symbol = symbol;
      // Public APIs
      scope.children = [];
      scope.element = element;
      scope.root = Scope.root != null ? Scope.root : Scope.root = scope; // It is assumed that the very first scope created is the root scope.
      scope.id = props.id;
      // Set up parent-child relationship
      if (parentScope != null) {
        parentScope.attachScope(scope);
      }
      // Add some info to help devs locate scope elements in the DOM
      if (Mode.dev) {
        element.setAttribute("SCOPE", scope.id || "");
        if ((symbol != null ? symbol.symbolName : void 0) != null) {
          element.setAttribute("SYMBOL", symbol.symbolName);
        }
        attrs = Array.prototype.slice.call(element.attributes);
// Sort attrs so that dev names come first
        for (i = 0, len = attrs.length; i < len; i++) {
          attr = attrs[i];
          if (!(attr.name !== "SCOPE" && attr.name !== "SYMBOL")) {
            continue;
          }
          element.removeAttributeNS(attr.namespaceURI, attr.name);
          element.setAttributeNS(attr.namespaceURI, attr.name, attr.value);
        }
      }
      ref = Registry.all("ScopeProcessor");
      for (j = 0, len1 = ref.length; j < len1; j++) {
        scopeProcessor = ref[j];
        // Forcing a reflow fixes an IE bug â€” disabled, not deleted, until we can verify this doesn't affect Edge
        // window.getComputedStyle element

        // Run this scope through all the processors, which add special properties, callbacks, and other fanciness
        scopeProcessor(scope, props);
      }
      return scope;
    });
  });

}).call(this);
